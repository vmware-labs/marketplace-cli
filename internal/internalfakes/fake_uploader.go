// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/vmware-labs/marketplace-cli/v2/internal"
)

type FakeUploader struct {
	UploadMediaFileStub        func(string) (string, string, error)
	uploadMediaFileMutex       sync.RWMutex
	uploadMediaFileArgsForCall []struct {
		arg1 string
	}
	uploadMediaFileReturns struct {
		result1 string
		result2 string
		result3 error
	}
	uploadMediaFileReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	UploadProductFileStub        func(string) (string, string, error)
	uploadProductFileMutex       sync.RWMutex
	uploadProductFileArgsForCall []struct {
		arg1 string
	}
	uploadProductFileReturns struct {
		result1 string
		result2 string
		result3 error
	}
	uploadProductFileReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUploader) UploadMediaFile(arg1 string) (string, string, error) {
	fake.uploadMediaFileMutex.Lock()
	ret, specificReturn := fake.uploadMediaFileReturnsOnCall[len(fake.uploadMediaFileArgsForCall)]
	fake.uploadMediaFileArgsForCall = append(fake.uploadMediaFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UploadMediaFile", []interface{}{arg1})
	fake.uploadMediaFileMutex.Unlock()
	if fake.UploadMediaFileStub != nil {
		return fake.UploadMediaFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.uploadMediaFileReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUploader) UploadMediaFileCallCount() int {
	fake.uploadMediaFileMutex.RLock()
	defer fake.uploadMediaFileMutex.RUnlock()
	return len(fake.uploadMediaFileArgsForCall)
}

func (fake *FakeUploader) UploadMediaFileCalls(stub func(string) (string, string, error)) {
	fake.uploadMediaFileMutex.Lock()
	defer fake.uploadMediaFileMutex.Unlock()
	fake.UploadMediaFileStub = stub
}

func (fake *FakeUploader) UploadMediaFileArgsForCall(i int) string {
	fake.uploadMediaFileMutex.RLock()
	defer fake.uploadMediaFileMutex.RUnlock()
	argsForCall := fake.uploadMediaFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUploader) UploadMediaFileReturns(result1 string, result2 string, result3 error) {
	fake.uploadMediaFileMutex.Lock()
	defer fake.uploadMediaFileMutex.Unlock()
	fake.UploadMediaFileStub = nil
	fake.uploadMediaFileReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) UploadMediaFileReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.uploadMediaFileMutex.Lock()
	defer fake.uploadMediaFileMutex.Unlock()
	fake.UploadMediaFileStub = nil
	if fake.uploadMediaFileReturnsOnCall == nil {
		fake.uploadMediaFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.uploadMediaFileReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) UploadProductFile(arg1 string) (string, string, error) {
	fake.uploadProductFileMutex.Lock()
	ret, specificReturn := fake.uploadProductFileReturnsOnCall[len(fake.uploadProductFileArgsForCall)]
	fake.uploadProductFileArgsForCall = append(fake.uploadProductFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UploadProductFile", []interface{}{arg1})
	fake.uploadProductFileMutex.Unlock()
	if fake.UploadProductFileStub != nil {
		return fake.UploadProductFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.uploadProductFileReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUploader) UploadProductFileCallCount() int {
	fake.uploadProductFileMutex.RLock()
	defer fake.uploadProductFileMutex.RUnlock()
	return len(fake.uploadProductFileArgsForCall)
}

func (fake *FakeUploader) UploadProductFileCalls(stub func(string) (string, string, error)) {
	fake.uploadProductFileMutex.Lock()
	defer fake.uploadProductFileMutex.Unlock()
	fake.UploadProductFileStub = stub
}

func (fake *FakeUploader) UploadProductFileArgsForCall(i int) string {
	fake.uploadProductFileMutex.RLock()
	defer fake.uploadProductFileMutex.RUnlock()
	argsForCall := fake.uploadProductFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUploader) UploadProductFileReturns(result1 string, result2 string, result3 error) {
	fake.uploadProductFileMutex.Lock()
	defer fake.uploadProductFileMutex.Unlock()
	fake.UploadProductFileStub = nil
	fake.uploadProductFileReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) UploadProductFileReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.uploadProductFileMutex.Lock()
	defer fake.uploadProductFileMutex.Unlock()
	fake.UploadProductFileStub = nil
	if fake.uploadProductFileReturnsOnCall == nil {
		fake.uploadProductFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.uploadProductFileReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadMediaFileMutex.RLock()
	defer fake.uploadMediaFileMutex.RUnlock()
	fake.uploadProductFileMutex.RLock()
	defer fake.uploadProductFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUploader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Uploader = new(FakeUploader)
