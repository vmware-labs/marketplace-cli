// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"io"
	"sync"

	"github.com/vmware-labs/marketplace-cli/v2/internal"
)

type FakeProgressBarMaker struct {
	Stub        func(string, int64, io.Writer) internal.ProgressBar
	mutex       sync.RWMutex
	argsForCall []struct {
		arg1 string
		arg2 int64
		arg3 io.Writer
	}
	returns struct {
		result1 internal.ProgressBar
	}
	returnsOnCall map[int]struct {
		result1 internal.ProgressBar
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProgressBarMaker) Spy(arg1 string, arg2 int64, arg3 io.Writer) internal.ProgressBar {
	fake.mutex.Lock()
	ret, specificReturn := fake.returnsOnCall[len(fake.argsForCall)]
	fake.argsForCall = append(fake.argsForCall, struct {
		arg1 string
		arg2 int64
		arg3 io.Writer
	}{arg1, arg2, arg3})
	stub := fake.Stub
	returns := fake.returns
	fake.recordInvocation("ProgressBarMaker", []interface{}{arg1, arg2, arg3})
	fake.mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return returns.result1
}

func (fake *FakeProgressBarMaker) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeProgressBarMaker) Calls(stub func(string, int64, io.Writer) internal.ProgressBar) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = stub
}

func (fake *FakeProgressBarMaker) ArgsForCall(i int) (string, int64, io.Writer) {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].arg1, fake.argsForCall[i].arg2, fake.argsForCall[i].arg3
}

func (fake *FakeProgressBarMaker) Returns(result1 internal.ProgressBar) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	fake.returns = struct {
		result1 internal.ProgressBar
	}{result1}
}

func (fake *FakeProgressBarMaker) ReturnsOnCall(i int, result1 internal.ProgressBar) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	if fake.returnsOnCall == nil {
		fake.returnsOnCall = make(map[int]struct {
			result1 internal.ProgressBar
		})
	}
	fake.returnsOnCall[i] = struct {
		result1 internal.ProgressBar
	}{result1}
}

func (fake *FakeProgressBarMaker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProgressBarMaker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.ProgressBarMaker = new(FakeProgressBarMaker).Spy
